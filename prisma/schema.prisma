generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Partner {
  id                 String   @default(uuid()) @id
  name               String
  email              String   @unique
  phone              String
  referralCode       String   @unique
  referringPartner   Partner? @relation("Referrals", fields: [referringPartnerId], references: [id])
  referringPartnerId String? 
  referredPartners   Partner[] @relation("Referrals")
  company            Company  @relation(fields: [companyId], references: [id])
  companyId          String
  loans              Loan[]
  address            Address?  @relation(fields: [addressId], references: [id])
  addressId          String?   @unique 
  user               User?
}

model Company {
  id           String   @default(uuid()) @id
  name         String
  logo         String?
  phone        String
  partners     Partner[]
  loans        Loan[]
  users        User[]
  address      Address?  @relation(fields: [addressId], references: [id])
  addressId    String?   @unique
  slug         String   @unique @default(uuid())
  url          String?
  primaryColor String?
  email        String?
}

model Note {
  id         String    @default(uuid()) @id
  text       String
  loan       Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId     Int?
  sender     User      @relation(fields: [senderId], references: [id])
  senderId   String
  createdAt  DateTime  @default(now())
  borrower   Borrower? @relation(fields: [borrowerId], references: [id])
  borrowerId String?
}

model User {
  id        String   @default(uuid()) @id
  name      String  @default("User")
  email     String   @unique
  password  String
  role      Role     @default(PARTNER)
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  partner   Partner? @relation(fields: [partnerId], references: [id])
  partnerId String?  @unique
  notes     Note[]
  loans     Loan[]   @relation("LoanAdmin")
}

enum Role {
  ADMIN
  COMPANY
  PARTNER
  LOAN_ADMIN
}

model Loan {
  id           Int       @default(autoincrement()) @id
  loanType     LoanType
  loanAmount   Float
  status       LoanStatus
  paid         Boolean    @default(false)
  company      Company    @relation(fields: [companyId], references: [id])
  companyId    String
  accessCode   String     @unique
  address      Address?   @relation(fields: [addressId], references: [id])
  addressId    String?    @unique
  partner      Partner?   @relation(fields: [partnerId], references: [id])
  partnerId    String?
  loanAdmin    User?      @relation("LoanAdmin", fields: [loanAdminId], references: [id])
  loanAdminId  String?
  downPayment  Float?
  annualIncome Float?
  monthlyDebt  Float?
  notes        Note[]
  borrowers    Borrower[]
}

model Borrower {
  id        String  @default(uuid()) @id
  firstName String
  lastName  String
  email     String
  phone     String?
  employer  String?
  position  String?
  income    Float?
  credit    CreditRating?
  loans     Loan[]
  notes     Note[]
  createdAt DateTime @default(now())
  coBorrower Boolean @default(false)
}

enum CreditRating {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

model Address {
  id           String  @default(uuid()) @id
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zip          String
  partners     Partner[]
  companies    Company[]
  loans        Loan[]
}

enum LoanType {
  EQUITY
  HOME_PURCHASE
  REFINANCE
  GENERAL_PURPOSE
}

enum LoanStatus {
  POSSIBLE_LOAN
  APPLICATION_SUBMITTED
  CREDIT_AND_DOCUMENTS
  UNDERWRITING
  LOAN_FUNDED
  ON_HOLD
  CANCELLED
  NOT_QUALIFIED
}
